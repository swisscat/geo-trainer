{"version":3,"sources":["Quizz.js","Navbar.js","Data.js","View/ImproveView.js","App.js","serviceWorker.js","index.js"],"names":["Quizz","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","answer","formattedAnswer","showFeedback","similarityThreshold","numberThreshold","handleKeyPress","bind","assertThisInitialized","refresh","_this2","possibilities","country","question","names","Math","abs","population","some","item","stringSimilarity","feedback","feedbackType","feedbackComponent","_this3","success","validateAnswer","toLocaleString","react_default","a","createElement","className","concat","database","collection","add","expected","userId","remembered","input","type","onChange","e","setState","target","value","onKeyPress","number_format_default","thousandSeparator","onValueChange","values","formattedValue","src","flag","alt","onClick","key","Component","Navbar","navigation","close","arguments","length","undefined","inputElement","click","navigateTo","data-toggle","data-target","aria-controls","aria-expanded","aria-label","ref","id","version","Data","columns","scope","data","map","join","capital","name","ImproveView","failures","onSetRemembered","where","get","then","querySnapshot","forEach","doc","push","listFailures","update","failure","App","storableKeys","isLoaded","error","countries","hydrateStateWithStorage","window","addEventListener","saveStateToStorage","apiCall","loaded","altSpellings","filter","removeEventListener","localStorage","hasOwnProperty","getItem","JSON","parse","defineProperty","_this4","setItem","stringify","api","config","mock","Promise","resolve","reject","mockData","fetch","res","json","_this5","_this$state","questions","content","floor","random","src_Quizz","src_Data","View_ImproveView","role","src_Navbar","Boolean","location","hostname","match","toConsumableArray","Array","s","toString","replace","substring","firebase","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNA4HeA,cAvHX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAAEC,OAAQ,GAAIC,gBAAiB,GAAIC,cAAc,EAAOC,oBAAqB,GAAKC,gBAAiB,IAChHZ,EAAKa,eAAiBb,EAAKa,eAAeC,KAApBb,OAAAc,EAAA,EAAAd,QAAAc,EAAA,EAAAd,CAAAD,KACtBA,EAAKgB,QAAUhB,EAAKgB,QAAQF,KAAbb,OAAAc,EAAA,EAAAd,QAAAc,EAAA,EAAAd,CAAAD,KAJAA,gFAOF,IAAAiB,EAAAd,KACTe,EAAgB,CAACf,KAAKJ,MAAMoB,QAAQhB,KAAKJ,MAAMqB,WAEnD,OAAQjB,KAAKJ,MAAMqB,UACf,IAAK,OACDF,EAAgBf,KAAKJ,MAAMoB,QAAQE,MACnC,MAEJ,IAAK,aACD,OAAOC,KAAKC,KAAKpB,KAAKI,MAAMC,OAASL,KAAKJ,MAAMoB,QAAQK,YAAcrB,KAAKJ,MAAMoB,QAAQK,YAAcrB,KAAKI,MAAMK,gBAS1H,OAAOM,EAAcO,KAAK,SAACC,GACvB,OAAOC,2BAAiBD,EAAMT,EAAKV,MAAMC,QAAUS,EAAKV,MAAMI,uDAI7D,IACgBiB,EAAUC,EAAcC,EADxCC,EAAA5B,KACD6B,GAAU,EACV7B,KAAKI,MAAMC,QAAUL,KAAKI,MAAMG,eAE3BP,KAAKJ,MAAMqB,SAI4C,qBAA5CjB,KAAKJ,MAAMoB,QAAQhB,KAAKJ,MAAMqB,WAC1CQ,EAAW,yBAA2BzB,KAAKJ,MAAMqB,SACjDS,EAAe,UAEV1B,KAAK8B,kBACVD,GAAU,EACVJ,EAAW,WACXC,EAAe,YAGfD,EAAW,cAAgBzB,KAAKJ,MAAMqB,SAAW,OAASjB,KAAKJ,MAAMoB,QAAQhB,KAAKJ,MAAMqB,UAAUc,iBAClGL,EAAe,WAdfD,EAAW,mBACXC,EAAe,UAgBnBC,EAAoBK,EAAAC,EAAAC,cAAA,OAAKC,UAAS,oBAAAC,OAAsBV,IAAiBD,GAEzEzB,KAAKJ,MAAMyC,SAASC,WAAW,iBAAiBC,IAAI,CAChDlC,OAAQL,KAAKI,MAAMC,OACnBmC,SAAUxC,KAAKJ,MAAMoB,QAAQhB,KAAKJ,MAAMqB,UAAUc,iBAClDd,SAAUjB,KAAKJ,MAAMqB,SACrBY,QAASA,EACTY,OAAQzC,KAAKJ,MAAM6C,OACnBzB,QAAShB,KAAKJ,MAAMoB,QACpB0B,YAAY,KAIpB,IAAIC,EAAQX,EAAAC,EAAAC,cAAA,SAAOC,UAAU,eAAeS,KAAK,OAAOC,SAAU,SAACC,GAAD,OAAOlB,EAAKmB,SAAS,CAAC1C,OAAQyC,EAAEE,OAAOC,SAASC,WAAYlD,KAAKU,eAAgBuC,MAAOjD,KAAKI,MAAMC,SASrK,MAP4B,eAAxBL,KAAKJ,MAAMqB,WACX0B,EAAQX,EAAAC,EAAAC,cAACiB,EAAAlB,EAAD,CAAcE,UAAU,eAAee,WAAYlD,KAAKU,eAAgB0C,mBAAmB,EAAMH,MAAOjD,KAAKI,MAAME,gBAAiB+C,cAAe,SAACC,GAAW,IAC5JC,EAAyBD,EAAzBC,eAAgBN,EAASK,EAATL,MACvBrB,EAAKmB,SAAS,CAACzC,gBAAiBiD,EAAgBlD,OAAQ4C,QAK5DjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BAA6BqB,IAAKxD,KAAKJ,MAAMoB,QAAQyC,KAAMC,IAAI,sBAC9E1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,cAAuCnC,KAAKJ,MAAMqB,SAAlD,sBACC0B,GAELX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,UAAQU,KAAK,SAAST,UAAU,sCAAsCwB,QAAS,WAAO/B,EAAKmB,SAAS,CAACxC,cAAc,MAC/GyB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iBADjB,cADJ,OAMIH,EAAAC,EAAAC,cAAA,UAAQU,KAAK,SAAST,UAAU,wCAAwCwB,QAAS3D,KAAKa,SAClFmB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBADjB,cAOPR,2CAMFmB,GACX,GAAc,UAAVA,EAAEc,IACF,OAAI5D,KAAKI,MAAMG,aACJP,KAAKa,WAGhBb,KAAK+C,SAAS,CAACxC,cAAc,KACtB,qCAKXP,KAAK+C,SAAS,CAAC1C,OAAQ,GAAIE,cAAc,EAAOD,gBAAiB,KACjEN,KAAKJ,MAAMiB,iBApHCgD,aC+BLC,qLAhCAC,GAA0B,IAAdC,IAAcC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GAC7BjE,KAAKoE,cAAgBJ,GACrBhE,KAAKoE,aAAaC,QAEtBrE,KAAKJ,MAAM0E,WAAWP,oCAGjB,IAAAlE,EAAAG,KACL,OACIgC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iDACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,4BAA4BwB,QAAS,kBAAM9D,EAAKyE,WAAW,IAAI,KAAjF,eACAtC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,iBAAiBS,KAAK,SAAS2B,cAAY,WACrDC,cAAY,sBAAsBC,gBAAc,qBAAqBC,gBAAc,QACnFC,aAAW,oBAAoBC,IAAK,SAAAjC,GAAK,OAAI9C,EAAKuE,aAAezB,IACrEX,EAAAC,EAAAC,cAAA,QAAMC,UAAU,yBAEpBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAA2B0C,GAAG,sBACzC7C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,iCAAiCwB,QAAS,kBAAM9D,EAAKyE,WAAW,WAAlF,SACAtC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,iCAAiCwB,QAAS,kBAAM9D,EAAKyE,WAAW,UAAlF,YACAtC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,iCAAiCwB,QAAS,kBAAM9D,EAAKyE,WAAW,aAAlF,YAGJtC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAhB,IACMnC,KAAKJ,MAAMkF,kBA1BhBjB,aCqDNkB,cAlDX,SAAAA,EAAYnF,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA+E,IACflF,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiF,GAAA5E,KAAAH,KAAMJ,KAEDQ,MAAQ,CACT4E,QAASnF,EAAKD,MAAMoF,SAJTnF,wEASf,OACImC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,+CACbH,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAI+C,MAAM,QACVjD,EAAAC,EAAAC,cAAA,MAAI+C,MAAM,OAAV,WACAjD,EAAAC,EAAAC,cAAA,MAAI+C,MAAM,OAAV,WACAjD,EAAAC,EAAAC,cAAA,MAAI+C,MAAM,OAAV,gBAGJjD,EAAAC,EAAAC,cAAA,aACClC,KAAKJ,MAAMsF,KAAKC,IAAI,SAAAnE,GAAO,OACxBgB,EAAAC,EAAAC,cAAA,MAAI0B,IAAK5C,EAAQE,MAAMkE,KAAK,MACxBpD,EAAAC,EAAAC,cAAA,MAAI+C,MAAM,MAAM9C,UAAU,UAASH,EAAAC,EAAAC,cAAA,OAAKsB,IAAKxC,EAAQyC,KAAMC,IAAI,GAAGvB,UAAU,mBAC5EH,EAAAC,EAAAC,cAAA,UAAKlB,EAAQE,MAAMkE,KAAK,OACxBpD,EAAAC,EAAAC,cAAA,UAAKlB,EAAQqE,SACbrD,EAAAC,EAAAC,cAAA,UAAKlB,EAAQK,WAAWU,uBAMpCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACVnC,KAAKJ,MAAMsF,KAAKC,IAAI,SAAAnE,GAAO,OACxBgB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWyB,IAAK5C,EAAQE,MAAMkE,KAAK,MAC9CpD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,OAAKsB,IAAKxC,EAAQyC,KAAMC,IAAI,GAAGvB,UAAU,eAE7CH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,SAAIlB,EAAQsE,KAAKtD,EAAAC,EAAAC,cAAA,WAAOlB,EAAQqE,QAAQrD,EAAAC,EAAAC,cAAA,WAAOlB,EAAQK,WAAWU,+BAzC/E8B,6BCwEJ0B,2BAtEX,SAAAA,EAAY3F,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAuF,IACf1F,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyF,GAAApF,KAAAH,KAAMJ,KAEDQ,MAAQ,CACToF,SAAU,IAGd3F,EAAK4F,gBAAkB5F,EAAK4F,gBAAgB9E,KAArBb,OAAAc,EAAA,EAAAd,QAAAc,EAAA,EAAAd,CAAAD,KAPRA,8EAUJ,IAAAiB,EAAAd,KACXA,KAAKJ,MAAMyC,SAASC,WAAW,iBAC1BoD,MAAM,SAAU,KAAM1F,KAAKJ,MAAM6C,QACjCiD,MAAM,UAAW,MAAM,GACvBA,MAAM,aAAc,MAAM,GAC1BC,MACAC,KAAK,SAACC,GACH,IAAIL,EAAW,GACfK,EAAcC,QAAQ,SAACC,GACnB,IAAIb,EAAOa,EAAIb,OACfA,EAAKL,GAAKkB,EAAIlB,GACdW,EAASQ,KAAKd,KAGlBpE,EAAKiC,SAAS,CAACyC,SAAUA,kDAKjCxF,KAAKiG,uDAGOpB,GACC7E,KAAKJ,MAAMyC,SAASC,WAAW,iBAAiByD,IAAIlB,GAE1DqB,OAAO,CACVxD,YAAY,IAGhB1C,KAAKiG,gDAGA,IAAArE,EAAA5B,KACDwF,EAAWxF,KAAKI,MAAMoF,SAE1B,OAAKA,EAAStB,OAOVlC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,+CACAF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mCACbH,EAAAC,EAAAC,cAAA,aACCsD,EAASL,IAAI,SAAAgB,GAAO,OACjBnE,EAAAC,EAAAC,cAAA,MAAI0B,IAAKuC,EAAQtB,IACb7C,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAASH,EAAAC,EAAAC,cAAA,OAAKsB,IAAK2C,EAAQnF,QAAQyC,KAAMC,IAAI,GAAGvB,UAAU,mBACxEH,EAAAC,EAAAC,cAAA,0BAAkBiE,EAAQlF,SAA1B,OAAwCkF,EAAQnF,QAAQsE,KAAxD,QAAmEa,EAAQ3D,SAA3E,SAA2F2D,EAAQ9F,QACnG2B,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAAewB,QAAS,kBAAM/B,EAAK6D,gBAAgBU,EAAQtB,MAA7E,cAbhB7C,EAAAC,EAAAC,cAAA,gDAjDU2B,cCgKXuC,cAvJX,SAAAA,EAAYxG,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAoG,IACfvG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsG,GAAAjG,KAAAH,KAAMJ,KA4FV0E,WAAa,SAACP,GACVlE,EAAKkD,SAAS,CAACgB,WAAYA,KA3F3BlE,EAAKwG,aAAe,CAAC,cAErBxG,EAAKO,MAAQ,CACTkG,UAAU,EACVC,MAAO,KACPC,UAAW,KACXzC,WAAY,MATDlE,mFAaC,IAAAiB,EAAAd,KAChBA,KAAKyG,0BAILC,OAAOC,iBACH,eACA3G,KAAK4G,mBAAmBjG,KAAKX,OAGjCA,KAAK6G,QAAQ,wCACRjB,KAAK,SAACY,GACC1F,EAAKiC,SAAS,CACV+D,QAAQ,EACRN,UAAWA,EAAUrB,IAAI,SAACnE,GAGtB,OAFAA,EAAQE,MAAQ,CAACF,EAAQsE,MAAMlD,OAAOpB,EAAQ+F,aAAaC,OAAO,SAAA1B,GAAI,OAAIA,EAAKpB,OAAS,KAEjFlD,OAInB,SAACuF,GACGzF,EAAKiC,SAAS,CACVuD,UAAU,EACVC,MAAOA,qDAMvBG,OAAOO,oBACH,eACAjH,KAAK4G,mBAAmBjG,KAAKX,OAIjCA,KAAK4G,uEAGiB,IAAAhF,EAAA5B,KAEtBA,KAAKqG,aAAaP,QAAQ,SAAClC,GAEvB,GAAIsD,aAAaC,eAAevD,GAAM,CAElC,IAAIX,EAAQiE,aAAaE,QAAQxD,GAGjC,IACIX,EAAQoE,KAAKC,MAAMrE,GACnBrB,EAAKmB,SAALjD,OAAAyH,EAAA,EAAAzH,CAAA,GAAiB8D,EAAMX,IACzB,MAAOH,GAELlB,EAAKmB,SAALjD,OAAAyH,EAAA,EAAAzH,CAAA,GAAiB8D,EAAMX,qDAMlB,IAAAuE,EAAAxH,KACjBA,KAAKqG,aAAaP,QAAQ,SAAClC,GAEvBsD,aAAaO,QAAQ7D,EAAKyD,KAAKK,UAAUF,EAAKpH,MAAMwD,uCAIpD+D,GACJ,OAAIC,EAAOC,KACA,IAAIC,QAAQ,SAACC,EAASC,GACI,qBAAlBC,EAASN,GAChBI,EAAQE,EAASN,IAEjBK,EAAO,eAAiBL,KAGzBO,MAAMP,GACR/B,KAAK,SAAAuC,GAAG,OAAIA,EAAIC,0CAQpB,IAAAC,EAAArI,KAAAsI,EAC2CtI,KAAKI,MAA7CmG,EADH+B,EACG/B,MAAOO,EADVwB,EACUxB,OAAQ/C,EADlBuE,EACkBvE,WAAYyC,EAD9B8B,EAC8B9B,UAC7B+B,EAAYX,EAAOW,UAErBC,EAAUxG,EAAAC,EAAAC,cAAA,qBAEd,GAAI4E,EACA,OAAQ/C,GACJ,IAAK,QAED,IAAI/C,EAAUwF,EAAUrF,KAAKsH,MAAMtH,KAAKuH,SAASlC,EAAUtC,SAE3DsE,EAAUxG,EAAAC,EAAAC,cAACyG,EAAD,CAAO3H,QAASA,EAASC,SAAUsH,EAAUpH,KAAKsH,MAAMtH,KAAKuH,SAAWH,EAAUrE,SAAUrD,QAAS,kBAAMwH,EAAK/D,WAAW,UAAUjC,SAAUrC,KAAKJ,MAAMyC,SAAUI,OAAQzC,KAAKJ,MAAM6C,SAEjM,MAEJ,IAAK,OACD+F,EAAUxG,EAAAC,EAAAC,cAAC0G,EAAD,CAAM1D,KAAMsB,EAAWxB,QAASuD,IAC1C,MAEJ,IAAK,UACDC,EAAWxG,EAAAC,EAAAC,cAAC2G,EAAD,CAAaxG,SAAUrC,KAAKJ,MAAMyC,SAAUI,OAAQzC,KAAKJ,MAAM6C,SAC1E,MAEJ,QACI+F,EACIxG,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,6DACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,yDACAF,EAAAC,EAAAC,cAAA,kDAWxB,OAJIqE,IACAiC,EAAUxG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBAAqB2G,KAAK,SAASvC,IAI5DvE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAC6G,EAAD,CAAQzE,WAAYtE,KAAKsE,WAAYQ,QAAS8C,EAAO9C,UACrD9C,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBACXqG,WAjJH3E,aCEEmF,QACW,cAA7BtC,OAAOuC,SAASC,UAEe,UAA7BxC,OAAOuC,SAASC,UAEhBxC,OAAOuC,SAASC,SAASC,MACvB,8ECNN,IAAI1G,EAASyE,aAAaE,QAAQ,WAHvBtH,OAAAsJ,EAAA,EAAAtJ,CAAIuJ,MAAM,KAAKlE,IAAIhE,KAAKuH,QAAQvD,IAAI,SAAAmE,GAAC,OAAIA,EAAEC,SAAS,MAAKpE,IAAI,SAAAmE,GAAC,OAAIA,EAAEE,QAAQ,WAAY,MAAKpE,KAAK,IAAIqE,UAAU,EAAE,IAK7HvC,aAAaO,QAAQ,SAAUhF,GAE/BiH,gBAAuB9B,EAAO8B,UAE9BC,IAASC,OAAO5H,EAAAC,EAAAC,cAAC2H,EAAD,CAAKxH,SAAUqH,cAAsBjH,OAAQA,IAAWqH,SAASC,eAAe,SD+G1F,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtE,KAAK,SAAAuE,GACjCA,EAAaC","file":"static/js/main.8a7dfbfb.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport NumberFormat from 'react-number-format';\nimport { stringSimilarity } from \"string-similarity-js\";\n\nclass Quizz extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { answer: '', formattedAnswer: '', showFeedback: false, similarityThreshold: 0.5, numberThreshold: 0.1 };\n        this.handleKeyPress = this.handleKeyPress.bind(this);\n        this.refresh = this.refresh.bind(this);\n    }\n\n    validateAnswer() {\n        let possibilities = [this.props.country[this.props.question]];\n\n        switch (this.props.question) {\n            case 'name':\n                possibilities = this.props.country.names;\n                break;\n\n            case 'population':\n                return Math.abs((this.state.answer - this.props.country.population) / this.props.country.population) < this.state.numberThreshold;\n\n            case 'capital':\n                break;\n\n            default:\n                break;\n        }\n\n        return possibilities.some((item) => {\n            return stringSimilarity(item, this.state.answer) > this.state.similarityThreshold;\n        });\n    }\n\n    render() {\n        let success = false, feedback, feedbackType, feedbackComponent;\n        if (this.state.answer && this.state.showFeedback) {\n\n            if (!this.props.question) {\n                feedback = \"Missing question\";\n                feedbackType = \"danger\";\n            }\n            else if (typeof this.props.country[this.props.question] === \"undefined\") {\n                feedback = \"Invalid question type \" + this.props.question;\n                feedbackType = \"danger\";\n            }\n            else if (this.validateAnswer()) {\n                success = true;\n                feedback = \"Correct!\";\n                feedbackType = \"success\";\n            }\n            else {\n                feedback = \"Wrong! The \" + this.props.question + \" is \" + this.props.country[this.props.question].toLocaleString();\n                feedbackType = \"danger\";\n            }\n\n            feedbackComponent = <div className={`mt-3 alert alert-${feedbackType}`}>{feedback}</div>\n\n            this.props.database.collection('quizz-results').add({\n                answer: this.state.answer,\n                expected: this.props.country[this.props.question].toLocaleString(),\n                question: this.props.question,\n                success: success,\n                userId: this.props.userId,\n                country: this.props.country,\n                remembered: false,\n            })\n        }\n\n        let input = <input className=\"form-control\" type=\"text\" onChange={(e) => this.setState({answer: e.target.value})} onKeyPress={this.handleKeyPress} value={this.state.answer} />;\n\n        if (this.props.question === 'population') {\n            input = <NumberFormat className=\"form-control\" onKeyPress={this.handleKeyPress} thousandSeparator={true} value={this.state.formattedAnswer} onValueChange={(values) => {\n                const {formattedValue, value} = values;\n                this.setState({formattedAnswer: formattedValue, answer: value})\n            }}/>\n        }\n\n        return (\n            <div className=\"row justify-content-center\">\n                <div className=\"col-md-4\">\n                    <div className=\"card\">\n                        <img className=\"card-img-top border-bottom\" src={this.props.country.flag} alt=\"{this.props.name}\" />\n                        <div className=\"card-body\">\n                            <h5 className=\"card-title\">What's the {this.props.question} of this country ?</h5>\n                            {input}\n                        </div>\n                        <div className=\"card-footer\">\n                            <button type=\"button\" className=\"btn btn-default btn-outline-primary\" onClick={() => {this.setState({showFeedback: true})}}>\n                                <i className=\"fas fa-check\" />&nbsp;\n                                Check\n                            </button>\n&nbsp;\n                            <button type=\"button\" className=\"btn btn-default btn-outline-secondary\" onClick={this.refresh}>\n                                <i className=\"fas fa-sync\" />&nbsp;\n                                New\n                            </button>\n                        </div>\n                    </div>\n\n                    {feedbackComponent}\n                </div>\n            </div>\n        )\n    }\n\n    handleKeyPress(e) {\n        if (e.key === 'Enter') {\n            if (this.state.showFeedback) {\n                return this.refresh();\n            }\n\n            this.setState({showFeedback: true});\n            return false;\n        }\n    }\n\n    refresh() {\n        this.setState({answer: '', showFeedback: false, formattedAnswer: ''});\n        this.props.refresh();\n    }\n}\n\nexport default Quizz;","import React, { Component } from 'react';\nclass Navbar extends Component {\n\n    navigateTo(navigation, close = true) {\n        if (this.inputElement && close)\n            this.inputElement.click();\n\n        this.props.navigateTo(navigation);\n    }\n\n    render() {\n        return (\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n                <button className=\"navbar-brand btn btn-link\" onClick={() => this.navigateTo('', false)}>Geo Trainer</button>\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\"\n                        data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\"\n                        aria-label=\"Toggle navigation\" ref={input => this.inputElement = input}>\n                    <span className=\"navbar-toggler-icon\" />\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\n                    <div className=\"navbar-nav mr-auto\">\n                        <button className=\"nav-item nav-link btn btn-link\" onClick={() => this.navigateTo('quizz')}>Quizz</button>\n                        <button className=\"nav-item nav-link btn btn-link\" onClick={() => this.navigateTo('data')}>Database</button>\n                        <button className=\"nav-item nav-link btn btn-link\" onClick={() => this.navigateTo('improve')}>Improve</button>\n                    </div>\n\n                    <span className=\"navbar-text\">\n                        v{this.props.version}\n                    </span>\n                </div>\n            </nav>\n        )\n    }\n}\n\nexport default Navbar;","import React, { Component } from 'react';\n\nclass Data extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            columns: this.props.columns\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <table className=\"table table-hover gt-data d-none d-md-table\">\n                    <thead>\n                    <tr>\n                        <th scope=\"col\" />\n                        <th scope=\"col\">Country</th>\n                        <th scope=\"col\">Capital</th>\n                        <th scope=\"col\">Population</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {this.props.data.map(country => (\n                        <tr key={country.names.join(',')}>\n                            <th scope=\"row\" className=\"th-img\"><img src={country.flag} alt=\"\" className=\"img-thumbnail\" /></th>\n                            <td>{country.names.join(', ')}</td>\n                            <td>{country.capital}</td>\n                            <td>{country.population.toLocaleString()}</td>\n                        </tr>\n\n                    ))}\n                    </tbody>\n                </table>\n                <div className=\"d-md-none\">\n                    {this.props.data.map(country => (\n                        <div className=\"row mt-1\" key={country.names.join(',')}>\n                            <div className=\"col-5\">\n                                <img src={country.flag} alt=\"\" className=\"img-fluid\" />\n                            </div>\n                            <div className=\"col-7\">\n                                <p>{country.name}<br />{country.capital}<br />{country.population.toLocaleString()}</p>\n                            </div>\n                        </div>\n\n                    ))}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Data;","import React, { Component } from 'react';\n\nclass ImproveView extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            failures: []\n        };\n\n        this.onSetRemembered = this.onSetRemembered.bind(this);\n    }\n\n    listFailures() {\n        this.props.database.collection('quizz-results')\n            .where('userId', '==', this.props.userId)\n            .where('success', '==', false)\n            .where('remembered', '==', false)\n            .get()\n            .then((querySnapshot) => {\n                let failures = [];\n                querySnapshot.forEach((doc) => {\n                    let data = doc.data();\n                    data.id = doc.id;\n                    failures.push(data);\n                });\n\n                this.setState({failures: failures});\n            })\n    }\n\n    componentDidMount() {\n        this.listFailures();\n    }\n\n    onSetRemembered(id) {\n        let docRef = this.props.database.collection('quizz-results').doc(id);\n\n        docRef.update({\n            remembered: true\n        });\n\n        this.listFailures();\n    }\n\n    render() {\n        let failures = this.state.failures;\n\n        if (!failures.length) {\n            return (\n                <h6>Nothing to improve for now!</h6>\n            )\n        }\n\n        return (\n            <div>\n                <h6>I still need to practice these...</h6>\n                <table className=\"table gt-data d-none d-md-table\">\n                    <tbody>\n                    {failures.map(failure => (\n                        <tr key={failure.id}>\n                            <td className=\"th-img\"><img src={failure.country.flag} alt=\"\" className=\"img-thumbnail\" /></td>\n                            <td>The expected {failure.question} of {failure.country.name} was {failure.expected}, not {failure.answer}</td>\n                            <td><button className=\"btn btn-info\" onClick={() => this.onSetRemembered(failure.id)}>Ok!</button></td>\n                        </tr>\n                    ))}\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n}\n\nexport default ImproveView;","import React, { Component } from 'react';\nimport Quizz from \"./Quizz\";\nimport Navbar from \"./Navbar\";\nimport Data from \"./Data\";\nimport mockData from './mock';\nimport config from './config';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\nimport ImproveView from \"./View/ImproveView\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.storableKeys = ['navigation'];\n\n        this.state = {\n            isLoaded: false,\n            error: null,\n            countries: null,\n            navigation: null,\n        };\n    }\n\n    componentDidMount() {\n        this.hydrateStateWithStorage();\n\n        // add event listener to save state to localStorage\n        // when user leaves/refreshes the page\n        window.addEventListener(\n            \"beforeunload\",\n            this.saveStateToStorage.bind(this)\n        );\n\n        this.apiCall(\"https://restcountries.eu/rest/v2/all\")\n            .then((countries) => {\n                    this.setState({\n                        loaded: true,\n                        countries: countries.map((country) => {\n                            country.names = [country.name].concat(country.altSpellings.filter(name => name.length > 2));\n\n                            return country;\n                        })\n                    })\n                },\n                (error) => {\n                    this.setState({\n                        isLoaded: false,\n                        error: error\n                    })\n                });\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\n            \"beforeunload\",\n            this.saveStateToStorage.bind(this)\n        );\n\n        // saves if component has a chance to unmount\n        this.saveStateToStorage();\n    }\n\n    hydrateStateWithStorage() {\n        // for all items in state\n        this.storableKeys.forEach((key) => {\n            // if the key exists in localStorage\n            if (localStorage.hasOwnProperty(key)) {\n                // get the key's value from localStorage\n                let value = localStorage.getItem(key);\n\n                // parse the localStorage string and setState\n                try {\n                    value = JSON.parse(value);\n                    this.setState({ [key]: value });\n                } catch (e) {\n                    // handle empty string\n                    this.setState({ [key]: value });\n                }\n            }\n        });\n    }\n\n    saveStateToStorage() {\n        this.storableKeys.forEach((key) => {\n            // save to localStorage\n            localStorage.setItem(key, JSON.stringify(this.state[key]));\n        })\n    }\n\n    apiCall(api) {\n        if (config.mock) {\n            return new Promise((resolve, reject) => {\n                if (typeof mockData[api] !== \"undefined\")\n                    resolve(mockData[api]);\n                else\n                    reject('No mock for ' + api);\n            });\n        } else {\n            return fetch(api)\n                .then(res => res.json())\n        }\n    }\n\n    navigateTo = (navigation) => {\n        this.setState({navigation: navigation});\n    };\n\n    render() {\n        const { error, loaded, navigation, countries} = this.state;\n        const questions = config.questions;\n\n        let content = <h1>Loading</h1>;\n\n        if (loaded) {\n            switch (navigation) {\n                case 'quizz':\n\n                    let country = countries[Math.floor(Math.random()*countries.length)];\n\n                    content = <Quizz country={country} question={questions[Math.floor(Math.random() * questions.length)]} refresh={() => this.navigateTo('quizz')} database={this.props.database} userId={this.props.userId} />;\n\n                    break;\n\n                case 'data':\n                    content = <Data data={countries} columns={questions} />;\n                    break;\n\n                case 'improve':\n                    content  = <ImproveView database={this.props.database} userId={this.props.userId} />\n                    break;\n\n                default:\n                    content =\n                        <div>\n                            <h1>Geo Trainer</h1>\n                            <p>is your companion to memorize geographical data.</p>\n                            <br/>\n                            <ul>\n                                <li>Use Database contains the raw data to learn</li>\n                                <li>Test your knowledge with the Quizz</li>\n                            </ul>\n                        </div>;\n                    break;\n            }\n        }\n\n        if (error) {\n            content = <div className=\"alert alert-danger\" role=\"alert\">{error}</div>\n        }\n\n        return (\n            <div className=\"app\">\n                <Navbar navigateTo={this.navigateTo} version={config.version} />\n                <main className=\"container mt-3\">\n                    {content}\n                </main>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport * as firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport config from \"./config\";\n\nfunction generateUserId() {\n    return [...Array(10)].map(Math.random).map(s => s.toString(36)).map(s => s.replace(/[^a-z]+/g, '')).join('').substring(0,32);\n}\n\nvar userId = localStorage.getItem('userId') || generateUserId();\n\nlocalStorage.setItem('userId', userId);\n\nfirebase.initializeApp(config.firebase);\n\nReactDOM.render(<App database={firebase.firestore()} userId={userId}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}